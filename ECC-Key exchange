from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.hkdf import HKDF

def generate_ecc_keypair(curve):
    private_key = ec.generate_private_key(curve)
    public_key = private_key.public_key()
    return private_key, public_key

def derive_shared_secret(private_key, peer_public_key):
    shared_secret = private_key.exchange(ec.ECDH(), peer_public_key)
    derived_key = HKDF(
        algorithm=hashes.SHA256(),
        length=32,  # Deriving a 32-byte key
        salt=None,
        info=b'ECC Key Exchange'
    ).derive(shared_secret)
    return derived_key

def main():
    curve = ec.SECP256R1()
    print(f'Using curve: {curve.name}')
    alice_private, alice_public = generate_ecc_keypair(curve)
    bob_private, bob_public = generate_ecc_keypair(curve)
    alice_shared_key = derive_shared_secret(alice_private, bob_public)
    bob_shared_key = derive_shared_secret(bob_private, alice_public)
    
    print(f'Derived keys match: {alice_shared_key == bob_shared_key}')
    print(f'Derived Shared Key: {alice_shared_key.hex()}')
    
if __name__ == "__main__":
    main()
