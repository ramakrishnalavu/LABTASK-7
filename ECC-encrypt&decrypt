from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from Cryptodome.Cipher import AES
import os
def generate_ecc_keypair(curve):
 private_key=ec.generate_private_key(curve)
 public_key=private_key.public_key()
 return private_key, public_key
def derive_shared_secret(private_key, peer_public_key):
 shared_secret=private_key.exchange(ec.ECDH(), peer_public_key)
 derived_key=HKDF(algorithm=hashes.SHA256(),length=32,salt=None,info=b'ECC_AES_Key_Exchange').derive(shared_secret)
 return derived_key
def encrypt_message(key, plaintext):
 iv=os.urandom(12)
 cipher=AES.new(key, AES.MODE_GCM, iv)
 ciphertext, tag=cipher.encrypt_and_digest(plaintext.encode())
 return iv, ciphertext, tag
def decrypt_message(key, iv, ciphertext, tag):
 cipher=AES.new(key, AES.MODE_GCM, iv)
 decrypted_text=cipher.decrypt_and_verify(ciphertext, tag)
 return decrypted_text.decode()
def main(curve):
 print(f'Using curve: {curve.name}')
 alice_private, alice_public=generate_ecc_keypair(curve)
 bob_private, bob_public=generate_ecc_keypair(curve)
 alice_shared_key=derive_shared_secret(alice_private, bob_public)
 bob_shared_key=derive_shared_secret(bob_private, alice_public)
 print(f'Derived keys match: {alice_shared_key == bob_shared_key}')
 message="Hell0 SRM AP"
 iv, ciphertext, tag=encrypt_message(alice_shared_key, message)
 decrypted_message=decrypt_message(bob_shared_key, iv, ciphertext, tag)
 print(f'Original Message: {message}')
 print(f'Decrypted Message: {decrypted_message}')
 print('-'*50)
if __name__=="__main__":
 main(ec.SECP256R1())
 main(ec.SECP384R1())
